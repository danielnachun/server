IF ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" VERSION_LESS "2.8.7")
  FUNCTION(MESSAGE_ONCE id out)
    MESSAGE(STATUS "${out}")
  ENDFUNCTION()
ELSE()
  FUNCTION(MESSAGE_ONCE id out)
    STRING(MD5 hash "${out}")
    IF(NOT __msg1_${id} STREQUAL "${hash}")
      MESSAGE(STATUS "${out}")
    ENDIF()
    SET(__msg1_${id} ${hash} CACHE INTERNAL "")
  ENDFUNCTION()
ENDIF()

MACRO(SET_IF_UNSET VAR VAL)
  IF(NOT DEFINED ${VAR})
    SET(${VAR} ${VAL})
  ENDIF()
ENDMACRO()

INCLUDE(CMakeParseArguments)

MACRO(FIND_PACKAGE_WITH_OPTION package)
  CMAKE_PARSE_ARGUMENTS(ARG
    "REQUIRED"
    "PREFIX;DESCRIPTION"
    ""
    ${ARGN}
  )
  IF (ARG_PREFIX)
    STRING(TOUPPER "WITH_${ARG_PREFIX}_${package}" V)
  ELSE()
    STRING(TOUPPER "WITH_${package}" V)
  ENDIF()
  IF (NOT ARG_DESCRIPTION)
    SET(ARG_DESCRIPTION "Whether to use ${package}")
  ENDIF()
  IF (ARG_REQUIRED)
    MESSAGE(FATAL_ERROR "FIND_PACKAGE_WITH_OPTION: cannot use REQUIRED here")
  ENDIF()
  SET(${V} AUTO CACHE STRING "${ARG_DESCRIPTION}, one of OFF, AUTO, ON")
  IF (${V} MATCHES "^(ON|TRUE|1)$")
    FIND_PACKAGE(${package} ${ARG_UNPARSED_ARGUMENTS} REQUIRED)
  ELSEIF (${V} MATCHES "^(AUTO)$")
    FIND_PACKAGE(${package} ${ARG_UNPARSED_ARGUMENTS})
  ELSEIF (NOT ${V} MATCHES "^(OFF|FALSE|0)$")
    MESSAGE(FATAL_ERROR "Invalid value for ${V} (${${V}}), must be one of OFF, AUTO, ON")
  ENDIF()
ENDMACRO()
