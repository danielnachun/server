--source include/have_partition.inc
--source include/lcase_names.inc
--source suite/parts/inc/engines.inc

# TODO:
#
# DDL log test, binlog test
# Add test cases from EXCHANGE: SP, PS, TRIGGER, GRANT
# Test complex table
# EXTRACT is keyword, now table names cannot be called like that

create or replace table t1 (x int)
partition by hash(x) partitions 2;
--error ER_ONLY_ON_RANGE_LIST_PARTITION
alter table t1 extract partition p1 as table tp1;

create or replace table t1 (x int)
partition by key(x) partitions 2;
--error ER_ONLY_ON_RANGE_LIST_PARTITION
alter table t1 extract partition p1 as table tp1;

create or replace table t1 (x int)
partition by range(x)
subpartition by hash(x) subpartitions 3 (
  partition p1 values less than (10),
  partition pn values less than maxvalue);
--error ER_PARTITION_EXTRACT_SUBPARTITIONED
alter table t1 extract partition p1 as table p1;
--error ER_DROP_PARTITION_NON_EXISTENT
alter table t1 extract partition p1sp0 as table p1;

create or replace table t1 (x int)
partition by range(x) (
  partition p1 values less than (10));
--error ER_DROP_LAST_PARTITION
alter table t1 extract partition p1 as table tp1;

if ($MTR_COMBINATION_RANGE)
{
  create or replace table t1 (x int)
  partition by range(x) (
    partition p1 values less than (10),
    partition p2 values less than (20),
    partition p3 values less than (30),
    partition p4 values less than (40),
    partition p5 values less than (50),
    partition pn values less than maxvalue);
}

if ($MTR_COMBINATION_LIST)
{
  create or replace table t1 (x int)
  partition by list(x) (
    partition p1 values in (2, 3, 4),
    partition p2 values in (12, 13, 14),
    partition p3 values in (22, 23, 24),
    partition p4 values in (32, 33, 34),
    partition p5 values in (42, 43, 44),
    partition pn values in (52, 53, 54));
}

if ($MTR_COMBINATION_HISTORY)
{
  let $all= for system_time all order by x;
  create or replace table t1 (
    x int,
    row_start timestamp(6) as row start invisible,
    row_end timestamp(6) as row end invisible,
    period for system_time(row_start, row_end)
  ) with system versioning
  partition by system_time limit 1 partitions 6;
}

insert into t1 values (2), (12), (22), (32), (42), (52);

create or replace table tp2 (y int);
insert tp2 values (88);
# Multiple ALTER PARTITION statements are not possible
--error ER_PARSE_ERROR
alter table t1 extract partition p2 as table tp2, drop partition p3;
# TODO: probably no need in such specific codes, should be ER_PARTITION_NON_EXISTENT
--error ER_DROP_PARTITION_NON_EXISTENT
alter table t1 extract partition p00 as table tp00;
# Better error here is ER_DROP_PARTITION_NON_EXISTENT,
# but mysql_alter_table() works checks new table before anything else.
# So, looks like no big reason to change anything here.
--error ER_TABLE_EXISTS_ERROR
alter table t1 extract partition p00 as table tp2;
--error ER_TABLE_EXISTS_ERROR
alter table t1 extract partition p2 as table tp2;
select * from tp2;
drop table tp2;
alter table t1 extract partition p2 as table tp2;

--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table tp2;
select * from tp2;
--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table t1;
select * from t1 order by x;

--error ER_BAD_DB_ERROR
alter table t1 extract partition p3 as table inexistent.tp3;
create database EXISTENT;
alter table t1 extract partition p3 as table EXISTENT.TP3;

# The only way to put `` into var...
--let $tp3=`select '`TP3`'`
if ($MTR_COMBINATION_LCASE1)
{
  --let $tp3= `select '`tp3`'`
}
--replace_result $engine X ' PAGE_CHECKSUM=1' '' $tp3 `TP3`-ok
show create table EXISTENT.TP3;
select * from EXISTENT.TP3 order by x;
--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table t1;
select * from t1 order by x;

drop database EXISTENT;
drop tables t1, tp2;

# FIXME: move to versioning suite
--echo # System-versioned tables (RANGE, LIST)

if ($MTR_COMBINATION_RANGE)
{
  create or replace table t1 (x int)
  with system versioning
  partition by range(x) (
    partition p1 values less than (10),
    partition p2 values less than (20),
    partition p3 values less than (30),
    partition p4 values less than (40),
    partition p5 values less than (50),
    partition pn values less than maxvalue);
}

if ($MTR_COMBINATION_LIST)
{
  create or replace table t1 (x int)
  with system versioning
  partition by list(x) (
    partition p1 values in (2, 3, 4),
    partition p2 values in (12, 13, 14),
    partition p3 values in (22, 23, 24),
    partition p4 values in (32, 33, 34),
    partition p5 values in (42, 43, 44),
    partition pn values in (52, 53, 54));
}

insert into t1 values (2), (12), (22), (32), (42), (52);
update t1 set x= x + 1;

alter table t1 extract partition p2 as table tp2;
--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table tp2;
select * from tp2;
select * from tp2 for system_time all order by x;

--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table t1;
select * from t1 order by x;
select * from t1 for system_time all order by x;

drop tables t1, tp2;

--echo # System-versioned tables (SYSTEM_TIME LIMIT)

create or replace table t1 (
  x int,
  row_start timestamp(6) as row start invisible,
  row_end timestamp(6) as row end invisible,
  period for system_time(row_start, row_end)
) with system versioning
partition by system_time limit 1 partitions 4;

insert into t1 values (2), (12), (22);
update t1 set x= x + 1 where x = 2;
update t1 set x= x + 1 where x = 12;
update t1 set x= x + 1 where x = 22;

select * from t1 partition (p1);
--error ER_VERS_WRONG_PARTS
alter table t1 extract partition pn as table tp1;
alter table t1 extract partition p1 as table tp1;

--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table tp1;
select * from tp1;
select * from tp1 for system_time all;

--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table t1;
select * from t1 order by x;
select * from t1 for system_time all order by x;

drop tables t1, tp1;

--echo # System-versioned tables (SYSTEM_TIME INTERVAL)

set timestamp= unix_timestamp('2000-01-01 00:00:00');
create or replace table t1 (
  x int,
  row_start timestamp(6) as row start invisible,
  row_end timestamp(6) as row end invisible,
  period for system_time(row_start, row_end)
) with system versioning
partition by system_time interval 1 hour partitions 4;

insert into t1 values (2), (12), (22);
set timestamp= unix_timestamp('2000-01-01 00:00:01');
update t1 set x= x + 1 where x = 2;
set timestamp= unix_timestamp('2000-01-01 01:00:00');
update t1 set x= x + 1 where x = 12;
set timestamp= unix_timestamp('2000-01-01 02:00:00');
update t1 set x= x + 1 where x = 22;

select * from t1 partition (p0);
select * from t1 partition (p1);
select * from t1 partition (p2);
--error ER_VERS_DROP_PARTITION_INTERVAL
alter table t1 extract partition p1 as table tp1;
alter table t1 extract partition p0 as table tp0;
alter table t1 extract partition p1 as table tp1;
--error ER_VERS_WRONG_PARTS
alter table t1 extract partition p2 as table tp2;

--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table tp0;
--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table tp1;
select * from tp0;
select * from tp1;
select * from tp0 for system_time all;
select * from tp1 for system_time all;

--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table t1;
select * from t1;
select * from t1 for system_time all order by x;

drop tables t1, tp0, tp1;

--echo # System-versioned tables (implicit)

create or replace table t1(x int) with system versioning
partition by system_time limit 1 partitions 3;

alter table t1 extract partition p1 as table tp1;
--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table tp1;
--replace_result $engine X ' PAGE_CHECKSUM=1' ''
show create table t1;

drop tables t1, tp1;
